[{"/Users/mk/stuff/fullstack-open-4/frontend/src/pages/BlogsPage.js":"1","/Users/mk/stuff/fullstack-open-4/frontend/src/index.tsx":"2","/Users/mk/stuff/fullstack-open-4/frontend/src/App.tsx":"3","/Users/mk/stuff/fullstack-open-4/frontend/src/state/store.ts":"4","/Users/mk/stuff/fullstack-open-4/frontend/src/services/login.ts":"5","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Notification.tsx":"6","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Login.tsx":"7","/Users/mk/stuff/fullstack-open-4/frontend/src/services/blogs.ts":"8","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Togglable.tsx":"9","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Blog.tsx":"10","/Users/mk/stuff/fullstack-open-4/frontend/src/components/BlogEditor.tsx":"11","/Users/mk/stuff/fullstack-open-4/frontend/src/utils/doFetch.ts":"12","/Users/mk/stuff/fullstack-open-4/frontend/src/utils/config.ts":"13","/Users/mk/stuff/fullstack-open-4/frontend/src/utils/errors.ts":"14","/Users/mk/stuff/fullstack-open-4/frontend/src/state/auth.store.ts":"15","/Users/mk/stuff/fullstack-open-4/frontend/src/state/notifications.store.ts":"16","/Users/mk/stuff/fullstack-open-4/frontend/src/pages/UsersPage.js":"17","/Users/mk/stuff/fullstack-open-4/frontend/src/services/users.ts":"18"},{"size":2268,"mtime":1642629509651,"results":"19","hashOfConfig":"20"},{"size":141,"mtime":1641971863149,"results":"21","hashOfConfig":"20"},{"size":1901,"mtime":1642800583905,"results":"22","hashOfConfig":"20"},{"size":1180,"mtime":1642799875613,"results":"23","hashOfConfig":"20"},{"size":550,"mtime":1642338378252,"results":"24","hashOfConfig":"20"},{"size":1033,"mtime":1642629299288,"results":"25","hashOfConfig":"20"},{"size":3063,"mtime":1642792801883,"results":"26","hashOfConfig":"20"},{"size":1407,"mtime":1642706705550,"results":"27","hashOfConfig":"20"},{"size":698,"mtime":1642013712011,"results":"28","hashOfConfig":"20"},{"size":1574,"mtime":1642013827388,"results":"29","hashOfConfig":"20"},{"size":2191,"mtime":1642628824039,"results":"30","hashOfConfig":"20"},{"size":796,"mtime":1642014800307,"results":"31","hashOfConfig":"20"},{"size":143,"mtime":1642012753420,"results":"32","hashOfConfig":"20"},{"size":353,"mtime":1642012818656,"results":"33","hashOfConfig":"20"},{"size":3050,"mtime":1642858071736,"results":"34","hashOfConfig":"20"},{"size":2067,"mtime":1642628494615,"results":"35","hashOfConfig":"20"},{"size":915,"mtime":1642799829487,"results":"36","hashOfConfig":"20"},{"size":868,"mtime":1642800935391,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"s5fefd",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mk/stuff/fullstack-open-4/frontend/src/pages/BlogsPage.js",["84"],"import React, { useRef, useState } from \"react\";\nimport { blogsApi } from \"../services/blogs\";\nimport Blog from \"../components/Blog\";\nimport Togglable from \"../components/Togglable\";\nimport BlogEditor from \"../components/BlogEditor\";\nimport { useNotification } from \"../state/notifications.store\";\n\nconst sortBlogsByLikes = (blogs) => {\n  const copy = [...blogs];\n  copy.sort((a, b) => b.likes - a.likes);\n  return copy;\n};\n\nconst BlogsPage = () => {\n  const [areSortByLikes, setAreSortByLikes] = useState(false);\n  const editorToggleRef = useRef();\n\n  const { data: blogs, isSuccess } = blogsApi.useGetQuery();\n\n  const sortedBlogs = areSortByLikes ? sortBlogsByLikes(blogs) : blogs;\n\n  const [updateOne] = blogsApi.useUpdateMutation();\n  const [deleteOne] = blogsApi.useDeleteMutation();\n\n  const showNotification = useNotification();\n\n  const onCreateSuccess = () => {\n    editorToggleRef.current.close();\n  };\n\n  const likeOne = (blog) => {\n    updateOne({\n      likes: blog.likes + 1,\n      id: blog.id,\n    })\n      .unwrap()\n      .then((blog) => {\n        showNotification({\n          message: `Blog ${blog.title} likes increased`,\n          type: \"success\",\n        });\n      })\n      .catch((error) => showNotification(error.message));\n  };\n\n  const deleteOneWithNotification = (blog) => {\n    deleteOne({\n      id: blog.id,\n    })\n      .unwrap()\n      .then(() => {\n        showNotification({\n          message: `Blog ${blog.title} was deleted`,\n          type: \"success\",\n        });\n      })\n      .catch((error) => showNotification(error.message));\n  };\n\n  const sortByLikes = () => {\n    setAreSortByLikes((prev) => !prev);\n  };\n\n  if (isSuccess) {\n    return (\n      <div>\n        <h2>\n          blogs\n          <button onClick={sortByLikes}>Sort by likes</button>\n        </h2>\n        {sortedBlogs.map((blog) => (\n          <Blog\n            key={blog.id}\n            blog={blog}\n            likeOne={likeOne}\n            deleteOne={deleteOneWithNotification}\n          />\n        ))}\n\n        <h2>create new</h2>\n        <Togglable action=\"Add blog\" ref={editorToggleRef}>\n          <BlogEditor onCreateSuccess={onCreateSuccess}></BlogEditor>\n        </Togglable>\n      </div>\n    );\n  }\n\n  return <div>Loading</div>;\n};\n\nexport default BlogsPage;\n",["85"],"/Users/mk/stuff/fullstack-open-4/frontend/src/index.tsx",[],["86"],"/Users/mk/stuff/fullstack-open-4/frontend/src/App.tsx",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/state/store.ts",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/services/login.ts",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/components/Notification.tsx",["87","88"],"import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectNotifications } from \"../state/notifications.store\";\n\nconst notificationColorMap = {\n  success: {\n    border: \"darkGreen\",\n    background: \"green\",\n  },\n  error: {\n    border: \"dargRed\",\n    background: \"red\",\n  },\n} as any;\n\nconst Notification = () => {\n  const notifications = useSelector(selectNotifications);\n\n  return (\n    <div style={{ position: \"fixed\", top: \"0\", right: \"0\" }}>\n      {notifications.map((notification) => (\n        <div\n          key={notification.id}\n          style={{\n            display: \"inline-block\",\n\n            textAlign: \"right\",\n            padding: \"10px\",\n            border: `2px solid ${\n              notificationColorMap[notification.type]?.border\n            }`,\n            background: `${\n              notificationColorMap[notification.type]?.background\n            }`,\n          }}\n        >\n          {notification.message}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Notification;\n","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Login.tsx",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/services/blogs.ts",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/components/Togglable.tsx",["89"],"import PropTypes from \"prop-types\";\nimport React, { forwardRef, Ref, useImperativeHandle, useState } from \"react\";\n\nconst togglable = ({ action, children }: any, ref: Ref<unknown>) => {\n  const [visible, setVisible] = useState(false);\n  useImperativeHandle(ref, () => ({\n    close: () => setVisible(false),\n  }));\n\n  const toggle = () => setVisible((state) => !state);\n\n  const content = visible ? children : null;\n\n  return (\n    <div>\n      {content}\n      <button onClick={toggle}>{visible ? \"cancel\" : action}</button>\n    </div>\n  );\n};\n\nconst Togglable = forwardRef(togglable);\n\nTogglable.propTypes = {\n  children: PropTypes.element,\n  action: PropTypes.string,\n};\n\nexport default Togglable;\n","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Blog.tsx",["90","91","92"],"/* eslint-disable react/prop-types */\nimport React, { useState } from \"react\";\n\nconst Blog = ({ blog, likeOne, deleteOne }: any) => {\n  const [showDetails, setShowDetails] = useState(false);\n\n  const deleteFn = () => {\n    const shouldDelete = window.confirm(`should delete ${blog.title}`);\n    if (shouldDelete) {\n      deleteOne(blog);\n    }\n  };\n\n  const detailsButtonLabel = showDetails ? \"Hide details\" : \"Show details\";\n  const toggleDetails = () => {\n    setShowDetails((showDetails) => !showDetails);\n  };\n\n  const toggleDetailsButton = (\n    <button\n      id=\"toggleBlogDetails\"\n      aria-live=\"polite\"\n      aria-controls=\"blogDetails\"\n      onClick={toggleDetails}\n    >\n      {detailsButtonLabel}\n    </button>\n  );\n\n  return (\n    <div role=\"region\" aria-label=\"blog info\">\n      <p aria-label=\"blog author\">{blog.author}</p>\n      <p aria-label=\"blog title\">{blog.title}</p>\n      {toggleDetailsButton}\n\n      <div\n        aria-labelledby=\"toggleBlogDetails\"\n        aria-expanded={showDetails}\n        id=\"blogDetails\"\n      >\n        {showDetails && (\n          <>\n            <p>\n              likes : <span aria-label=\"blog likes\">{blog.likes}</span>\n            </p>\n            <p>\n              url : <a href={blog.url}>Blog URL</a>\n            </p>\n            <button aria-label=\"delete blog\" onClick={deleteFn}>\n              Delete\n            </button>\n            <button aria-label=\"like blog\" onClick={() => likeOne(blog)}>\n              Like\n            </button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Blog;\n","/Users/mk/stuff/fullstack-open-4/frontend/src/components/BlogEditor.tsx",["93","94","95","96","97","98"],"import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { blogsApi } from \"../services/blogs\";\nimport { useNotification } from \"../state/notifications.store\";\n\nconst validateBlogForm = () => true;\nconst initialEditorState = {\n  title: \"\",\n  author: \"\",\n  url: \"\",\n};\n\nconst BlogEditor = ({ onCreateSuccess }: any) => {\n  const [blogForm, setBlogForm] = useState(initialEditorState);\n  const showNotification = useNotification();\n  const [createBlog] = blogsApi.useCreateMutation();\n\n  const onChange = (prop: any) => (event: any) => {\n    event.preventDefault();\n    const value = event.target.value;\n\n    setBlogForm((state) => ({ ...state, [prop]: value }));\n  };\n\n  const onSubmit = (event: any) => {\n    event.preventDefault();\n\n    if (validateBlogForm()) {\n      createBlog({ ...blogForm })\n        .unwrap()\n        .then((blog) => {\n          setBlogForm(initialEditorState);\n          onCreateSuccess();\n          showNotification({\n            message: `${blog.title} has been created`,\n            type: \"success\",\n          });\n        })\n        .catch((error) =>\n          showNotification({\n            message: `${error.message}`,\n            type: \"success\",\n          })\n        );\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <div>\n          <label htmlFor=\"title\">Title:</label>\n          <input\n            id=\"title\"\n            name=\"title\"\n            value={blogForm.title}\n            onChange={onChange(\"title\")}\n          ></input>\n        </div>\n        <div>\n          <label htmlFor=\"author\">Author:</label>\n          <input\n            id=\"author\"\n            name=\"author\"\n            value={blogForm.author}\n            onChange={onChange(\"author\")}\n          ></input>\n        </div>\n        <div>\n          <label htmlFor=\"url\">url:</label>\n          <input\n            id=\"url\"\n            name=\"url\"\n            value={blogForm.url}\n            onChange={onChange(\"url\")}\n          ></input>\n        </div>\n        <div>\n          <button>Create</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nBlogEditor.propTypes = {\n  onCreateSuccess: PropTypes.func,\n};\n\nexport default BlogEditor;\n","/Users/mk/stuff/fullstack-open-4/frontend/src/utils/doFetch.ts",["99"],"import { ApiError } from \"./errors\";\n\nconst doFetch = ({\n  url,\n  method,\n  token,\n  body,\n}: {\n  url: string;\n  method: \"POST\" | \"GET\" | \"PATCH\" | \"DELETE\";\n  token: string;\n  body?: unknown;\n}) =>\n  fetch(url, {\n    method,\n    body: body ? JSON.stringify(body) : null,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  })\n    .then((response) => {\n      if (response.ok) {\n        return response.text();\n      }\n\n      return response.text().then((text) => {\n        throw text;\n      });\n    })\n    .then((text) => {\n      return text ? JSON.parse(text) : {};\n    })\n    .catch((textError) => {\n      const data = textError.message ? JSON.parse(textError.message) : {};\n      throw new ApiError(data);\n    });\n\nexport default doFetch;\n",["100"],"/Users/mk/stuff/fullstack-open-4/frontend/src/utils/config.ts",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/utils/errors.ts",["101","102","103"],"export class ApiError extends Error {\n  data: any;\n\n  constructor(data: any) {\n    console.log(data);\n    const { error, message, ...restOfData } = data;\n\n    if (error) {\n      super(error);\n    } else if (message) {\n      super(message);\n    } else {\n      super(\"Unknown error\");\n    }\n\n    this.name = \"api-error\";\n    this.data = restOfData;\n  }\n}\n","/Users/mk/stuff/fullstack-open-4/frontend/src/state/auth.store.ts",["104"],"/Users/mk/stuff/fullstack-open-4/frontend/src/state/notifications.store.ts",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/pages/UsersPage.js",["105"],"/Users/mk/stuff/fullstack-open-4/frontend/src/services/users.ts",["106","107"],{"ruleId":"108","severity":1,"message":"109","line":14,"column":19,"nodeType":"110","messageId":"111","endLine":14,"endColumn":24},{"ruleId":"112","replacedBy":"113"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":15,"column":6,"nodeType":"116","messageId":"117","endLine":15,"endColumn":9,"suggestions":"118"},{"ruleId":"108","severity":1,"message":"109","line":17,"column":22,"nodeType":"110","messageId":"111","endLine":17,"endColumn":27},{"ruleId":"114","severity":1,"message":"115","line":4,"column":42,"nodeType":"116","messageId":"117","endLine":4,"endColumn":45,"suggestions":"119"},{"ruleId":"108","severity":1,"message":"109","line":4,"column":14,"nodeType":"110","messageId":"111","endLine":4,"endColumn":52},{"ruleId":"108","severity":1,"message":"120","line":4,"column":15,"nodeType":"121","messageId":"122","endLine":4,"endColumn":48},{"ruleId":"114","severity":1,"message":"115","line":4,"column":45,"nodeType":"116","messageId":"117","endLine":4,"endColumn":48,"suggestions":"123"},{"ruleId":"108","severity":1,"message":"109","line":14,"column":20,"nodeType":"110","messageId":"111","endLine":14,"endColumn":49},{"ruleId":"108","severity":1,"message":"120","line":14,"column":21,"nodeType":"121","messageId":"122","endLine":14,"endColumn":45},{"ruleId":"114","severity":1,"message":"115","line":14,"column":42,"nodeType":"116","messageId":"117","endLine":14,"endColumn":45,"suggestions":"124"},{"ruleId":"114","severity":1,"message":"115","line":19,"column":27,"nodeType":"116","messageId":"117","endLine":19,"endColumn":30,"suggestions":"125"},{"ruleId":"114","severity":1,"message":"115","line":19,"column":43,"nodeType":"116","messageId":"117","endLine":19,"endColumn":46,"suggestions":"126"},{"ruleId":"114","severity":1,"message":"115","line":26,"column":28,"nodeType":"116","messageId":"117","endLine":26,"endColumn":31,"suggestions":"127"},{"ruleId":"108","severity":1,"message":"109","line":3,"column":17,"nodeType":"110","messageId":"111","endLine":13,"endColumn":6},{"ruleId":"112","replacedBy":"128"},{"ruleId":"114","severity":1,"message":"115","line":2,"column":9,"nodeType":"116","messageId":"117","endLine":2,"endColumn":12,"suggestions":"129"},{"ruleId":"108","severity":1,"message":"130","line":4,"column":15,"nodeType":"131","messageId":"132","endLine":4,"endColumn":24},{"ruleId":"114","severity":1,"message":"115","line":4,"column":21,"nodeType":"116","messageId":"117","endLine":4,"endColumn":24,"suggestions":"133"},{"ruleId":"108","severity":1,"message":"109","line":26,"column":28,"nodeType":"110","messageId":"111","endLine":26,"endColumn":33},{"ruleId":"108","severity":1,"message":"109","line":5,"column":26,"nodeType":"110","messageId":"111","endLine":5,"endColumn":31},{"ruleId":"114","severity":1,"message":"115","line":21,"column":34,"nodeType":"116","messageId":"117","endLine":21,"endColumn":37,"suggestions":"134"},{"ruleId":"114","severity":1,"message":"115","line":22,"column":26,"nodeType":"116","messageId":"117","endLine":22,"endColumn":29,"suggestions":"135"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","jest/no-try-expect",["136"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["137","138"],["139","140"],"Object pattern argument should be typed with a non-any type.","ObjectPattern","anyTypedArgUnnamed",["141","142"],["143","144"],["145","146"],["147","148"],["149","150"],["136"],["151","152"],"Argument 'data' should be typed with a non-any type.","Identifier","anyTypedArg",["153","154"],["155","156"],["157","158"],"no-conditional-expect",{"messageId":"159","fix":"160","desc":"161"},{"messageId":"162","fix":"163","desc":"164"},{"messageId":"159","fix":"165","desc":"161"},{"messageId":"162","fix":"166","desc":"164"},{"messageId":"159","fix":"167","desc":"161"},{"messageId":"162","fix":"168","desc":"164"},{"messageId":"159","fix":"169","desc":"161"},{"messageId":"162","fix":"170","desc":"164"},{"messageId":"159","fix":"171","desc":"161"},{"messageId":"162","fix":"172","desc":"164"},{"messageId":"159","fix":"173","desc":"161"},{"messageId":"162","fix":"174","desc":"164"},{"messageId":"159","fix":"175","desc":"161"},{"messageId":"162","fix":"176","desc":"164"},{"messageId":"159","fix":"177","desc":"161"},{"messageId":"162","fix":"178","desc":"164"},{"messageId":"159","fix":"179","desc":"161"},{"messageId":"162","fix":"180","desc":"164"},{"messageId":"159","fix":"181","desc":"161"},{"messageId":"162","fix":"182","desc":"164"},{"messageId":"159","fix":"183","desc":"161"},{"messageId":"162","fix":"184","desc":"164"},"suggestUnknown",{"range":"185","text":"186"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"185","text":"187"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"188","text":"186"},{"range":"188","text":"187"},{"range":"189","text":"186"},{"range":"189","text":"187"},{"range":"190","text":"186"},{"range":"190","text":"187"},{"range":"191","text":"186"},{"range":"191","text":"187"},{"range":"192","text":"186"},{"range":"192","text":"187"},{"range":"193","text":"186"},{"range":"193","text":"187"},{"range":"194","text":"186"},{"range":"194","text":"187"},{"range":"195","text":"186"},{"range":"195","text":"187"},{"range":"196","text":"186"},{"range":"196","text":"187"},{"range":"197","text":"186"},{"range":"197","text":"187"},[306,309],"unknown","never",[157,160],[124,127],[338,341],[538,541],[554,557],[723,726],[46,49],[72,75],[702,705],[735,738]]