[{"/Users/mk/stuff/fullstack-open-4/frontend/src/pages/BlogsPage.js":"1","/Users/mk/stuff/fullstack-open-4/frontend/src/index.tsx":"2","/Users/mk/stuff/fullstack-open-4/frontend/src/App.tsx":"3","/Users/mk/stuff/fullstack-open-4/frontend/src/state/store.ts":"4","/Users/mk/stuff/fullstack-open-4/frontend/src/services/login.ts":"5","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Notification.tsx":"6","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Login.tsx":"7","/Users/mk/stuff/fullstack-open-4/frontend/src/services/blogs.ts":"8","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Togglable.tsx":"9","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Blog.tsx":"10","/Users/mk/stuff/fullstack-open-4/frontend/src/components/BlogEditor.tsx":"11","/Users/mk/stuff/fullstack-open-4/frontend/src/utils/doFetch.ts":"12","/Users/mk/stuff/fullstack-open-4/frontend/src/utils/config.ts":"13","/Users/mk/stuff/fullstack-open-4/frontend/src/utils/errors.ts":"14","/Users/mk/stuff/fullstack-open-4/frontend/src/state/auth.store.ts":"15","/Users/mk/stuff/fullstack-open-4/frontend/src/state/notifications.store.ts":"16","/Users/mk/stuff/fullstack-open-4/frontend/src/services/users.ts":"17","/Users/mk/stuff/fullstack-open-4/frontend/src/pages/UsersPage.tsx":"18","/Users/mk/stuff/fullstack-open-4/frontend/src/pages/UserPage.tsx":"19","/Users/mk/stuff/fullstack-open-4/frontend/src/pages/BlogPage.tsx":"20","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Navigation.tsx":"21"},{"size":2268,"mtime":1642858142103,"results":"22","hashOfConfig":"23"},{"size":141,"mtime":1641971863149,"results":"24","hashOfConfig":"23"},{"size":2217,"mtime":1643478860714,"results":"25","hashOfConfig":"23"},{"size":1180,"mtime":1642799875613,"results":"26","hashOfConfig":"23"},{"size":550,"mtime":1642338378252,"results":"27","hashOfConfig":"23"},{"size":1033,"mtime":1642629299288,"results":"28","hashOfConfig":"23"},{"size":3063,"mtime":1642792801883,"results":"29","hashOfConfig":"23"},{"size":2347,"mtime":1643463535818,"results":"30","hashOfConfig":"23"},{"size":698,"mtime":1642013712011,"results":"31","hashOfConfig":"23"},{"size":1808,"mtime":1642940315599,"results":"32","hashOfConfig":"23"},{"size":2191,"mtime":1642628824039,"results":"33","hashOfConfig":"23"},{"size":796,"mtime":1642014800307,"results":"34","hashOfConfig":"23"},{"size":143,"mtime":1642012753420,"results":"35","hashOfConfig":"23"},{"size":353,"mtime":1642012818656,"results":"36","hashOfConfig":"23"},{"size":3050,"mtime":1642858071736,"results":"37","hashOfConfig":"23"},{"size":2067,"mtime":1642628494615,"results":"38","hashOfConfig":"23"},{"size":870,"mtime":1643013567236,"results":"39","hashOfConfig":"23"},{"size":785,"mtime":1642969264310,"results":"40","hashOfConfig":"23"},{"size":924,"mtime":1642938613278,"results":"41","hashOfConfig":"23"},{"size":1308,"mtime":1643461362554,"results":"42","hashOfConfig":"23"},{"size":1218,"mtime":1643478808376,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"s5fefd",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"75"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mk/stuff/fullstack-open-4/frontend/src/pages/BlogsPage.js",["97"],"import React, { useRef, useState } from \"react\";\nimport { blogsApi } from \"../services/blogs\";\nimport Blog from \"../components/Blog\";\nimport Togglable from \"../components/Togglable\";\nimport BlogEditor from \"../components/BlogEditor\";\nimport { useNotification } from \"../state/notifications.store\";\n\nconst sortBlogsByLikes = (blogs) => {\n  const copy = [...blogs];\n  copy.sort((a, b) => b.likes - a.likes);\n  return copy;\n};\n\nconst BlogsPage = () => {\n  const [areSortByLikes, setAreSortByLikes] = useState(false);\n  const editorToggleRef = useRef();\n\n  const { data: blogs, isSuccess } = blogsApi.useGetQuery();\n\n  const sortedBlogs = areSortByLikes ? sortBlogsByLikes(blogs) : blogs;\n\n  const [updateOne] = blogsApi.useUpdateMutation();\n  const [deleteOne] = blogsApi.useDeleteMutation();\n\n  const showNotification = useNotification();\n\n  const onCreateSuccess = () => {\n    editorToggleRef.current.close();\n  };\n\n  const likeOne = (blog) => {\n    updateOne({\n      likes: blog.likes + 1,\n      id: blog.id,\n    })\n      .unwrap()\n      .then((blog) => {\n        showNotification({\n          message: `Blog ${blog.title} likes increased`,\n          type: \"success\",\n        });\n      })\n      .catch((error) => showNotification(error.message));\n  };\n\n  const deleteOneWithNotification = (blog) => {\n    deleteOne({\n      id: blog.id,\n    })\n      .unwrap()\n      .then(() => {\n        showNotification({\n          message: `Blog ${blog.title} was deleted`,\n          type: \"success\",\n        });\n      })\n      .catch((error) => showNotification(error.message));\n  };\n\n  const sortByLikes = () => {\n    setAreSortByLikes((prev) => !prev);\n  };\n\n  if (isSuccess) {\n    return (\n      <div>\n        <h2>\n          blogs\n          <button onClick={sortByLikes}>Sort by likes</button>\n        </h2>\n        {sortedBlogs.map((blog) => (\n          <Blog\n            key={blog.id}\n            blog={blog}\n            likeOne={likeOne}\n            deleteOne={deleteOneWithNotification}\n          />\n        ))}\n\n        <h2>create new</h2>\n        <Togglable action=\"Add blog\" ref={editorToggleRef}>\n          <BlogEditor onCreateSuccess={onCreateSuccess}></BlogEditor>\n        </Togglable>\n      </div>\n    );\n  }\n\n  return <div>Loading</div>;\n};\n\nexport default BlogsPage;\n","/Users/mk/stuff/fullstack-open-4/frontend/src/index.tsx",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/App.tsx",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/state/store.ts",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/services/login.ts",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/components/Notification.tsx",["98","99"],"import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectNotifications } from \"../state/notifications.store\";\n\nconst notificationColorMap = {\n  success: {\n    border: \"darkGreen\",\n    background: \"green\",\n  },\n  error: {\n    border: \"dargRed\",\n    background: \"red\",\n  },\n} as any;\n\nconst Notification = () => {\n  const notifications = useSelector(selectNotifications);\n\n  return (\n    <div style={{ position: \"fixed\", top: \"0\", right: \"0\" }}>\n      {notifications.map((notification) => (\n        <div\n          key={notification.id}\n          style={{\n            display: \"inline-block\",\n\n            textAlign: \"right\",\n            padding: \"10px\",\n            border: `2px solid ${\n              notificationColorMap[notification.type]?.border\n            }`,\n            background: `${\n              notificationColorMap[notification.type]?.background\n            }`,\n          }}\n        >\n          {notification.message}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Notification;\n","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Login.tsx",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/services/blogs.ts",["100","101","102"],"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport { BlogUpdate, Blog } from \"../models/blog\";\nimport { BlogComment } from \"../models/blogComment\";\nimport { AppState } from \"../state/store\";\n\nimport config from \"../utils/config\";\n\nexport const blogsApi = createApi({\n  reducerPath: \"blogs\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${config.API_HOST}/api/`,\n    prepareHeaders: (headers, api) => {\n      const token = (api.getState() as AppState).auth.token;\n      headers.set(\"Authorization\", `Bearer ${token}`);\n\n      return headers;\n    },\n  }),\n  tagTypes: [\"BLOGS\", \"COMMENTS\"],\n  endpoints: (builder) => ({\n    get: builder.query<Blog[], void>({\n      query: () => ({ url: \"blogs\", method: \"GET\" }),\n      providesTags: [\"BLOGS\"],\n    }),\n    create: builder.mutation<Blog, Omit<Blog, \"id\" | \"likes\">>({\n      query: (blog) => ({\n        url: \"blogs\",\n        method: \"POST\",\n        body: blog,\n      }),\n      invalidatesTags: [\"BLOGS\"],\n    }),\n    update: builder.mutation<Blog, BlogUpdate>({\n      query: (update) => {\n        const { id, ...changes } = update;\n        return {\n          url: `blogs/${id}`,\n          method: \"PATCH\",\n          body: changes,\n        };\n      },\n      invalidatesTags: [\"BLOGS\"],\n    }),\n    delete: builder.mutation<void, Pick<Blog, \"id\">>({\n      query: (id) => ({\n        url: `blogs/${id}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [\"BLOGS\"],\n    }),\n  }),\n});\n\nexport const commentsApi = blogsApi.injectEndpoints({\n  endpoints: (builder) => ({\n    addComment: builder.mutation<BlogComment, BlogComment>({\n      query: (comment) => ({\n        url: `blogs/${comment.blogId}/comments`,\n        method: \"POST\",\n        body: { ...comment, blog: comment.blogId },\n      }),\n      transformResponse: (response: any) => ({\n        ...response,\n        blogId: response.blog,\n      }),\n      invalidatesTags: (data) => [{ type: \"COMMENTS\", id: data?.blogId }],\n    }),\n    comments: builder.query<BlogComment[], BlogComment[\"blogId\"]>({\n      query: (blogId) => ({\n        url: `blogs/${blogId}/comments`,\n        method: \"GET\",\n      }),\n      transformResponse: (data: any) =>\n        data.map((comment: any) => ({ ...comment, blogId: comment.blog })),\n      providesTags: (_, __, blogId) => [{ type: \"COMMENTS\", id: blogId }],\n    }),\n  }),\n});","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Togglable.tsx",["103"],"import PropTypes from \"prop-types\";\nimport React, { forwardRef, Ref, useImperativeHandle, useState } from \"react\";\n\nconst togglable = ({ action, children }: any, ref: Ref<unknown>) => {\n  const [visible, setVisible] = useState(false);\n  useImperativeHandle(ref, () => ({\n    close: () => setVisible(false),\n  }));\n\n  const toggle = () => setVisible((state) => !state);\n\n  const content = visible ? children : null;\n\n  return (\n    <div>\n      {content}\n      <button onClick={toggle}>{visible ? \"cancel\" : action}</button>\n    </div>\n  );\n};\n\nconst Togglable = forwardRef(togglable);\n\nTogglable.propTypes = {\n  children: PropTypes.element,\n  action: PropTypes.string,\n};\n\nexport default Togglable;\n","/Users/mk/stuff/fullstack-open-4/frontend/src/components/Blog.tsx",["104","105","106"],"/* eslint-disable react/prop-types */\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Blog = ({ blog, likeOne, deleteOne }: any) => {\n  const [showDetails, setShowDetails] = useState(false);\n\n  const deleteFn = () => {\n    const shouldDelete = window.confirm(`should delete ${blog.title}`);\n    if (shouldDelete) {\n      deleteOne(blog);\n    }\n  };\n\n  const detailsButtonLabel = showDetails ? \"Hide details\" : \"Show details\";\n  const toggleDetails = () => {\n    setShowDetails((showDetails) => !showDetails);\n  };\n\n  const toggleDetailsButton = (\n    <button\n      id=\"toggleBlogDetails\"\n      aria-live=\"polite\"\n      aria-controls=\"blogDetails\"\n      onClick={toggleDetails}\n    >\n      {detailsButtonLabel}\n    </button>\n  );\n\n  return (\n    <div role=\"region\" aria-label=\"blog info\">\n      <p aria-label=\"blog author\">{blog.author}</p>\n      <p aria-label=\"blog title\">{blog.title}</p>\n      {toggleDetailsButton}\n\n      <div\n        aria-labelledby=\"toggleBlogDetails\"\n        aria-expanded={showDetails}\n        id=\"blogDetails\"\n      >\n        {showDetails && (\n          <>\n            <p>\n              Title :{\" \"}\n              <span aria-label=\"blog name\">\n                <Link to={`/blogs/${blog.id}`}>{blog.title}</Link>\n              </span>\n            </p>\n            <p>\n              likes : <span aria-label=\"blog likes\">{blog.likes}</span>\n            </p>\n            <p>\n              url : <a href={blog.url}>Blog URL</a>\n            </p>\n            <button aria-label=\"delete blog\" onClick={deleteFn}>\n              Delete\n            </button>\n            <button aria-label=\"like blog\" onClick={() => likeOne(blog)}>\n              Like\n            </button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Blog;\n","/Users/mk/stuff/fullstack-open-4/frontend/src/components/BlogEditor.tsx",["107","108","109","110","111","112"],"import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { blogsApi } from \"../services/blogs\";\nimport { useNotification } from \"../state/notifications.store\";\n\nconst validateBlogForm = () => true;\nconst initialEditorState = {\n  title: \"\",\n  author: \"\",\n  url: \"\",\n};\n\nconst BlogEditor = ({ onCreateSuccess }: any) => {\n  const [blogForm, setBlogForm] = useState(initialEditorState);\n  const showNotification = useNotification();\n  const [createBlog] = blogsApi.useCreateMutation();\n\n  const onChange = (prop: any) => (event: any) => {\n    event.preventDefault();\n    const value = event.target.value;\n\n    setBlogForm((state) => ({ ...state, [prop]: value }));\n  };\n\n  const onSubmit = (event: any) => {\n    event.preventDefault();\n\n    if (validateBlogForm()) {\n      createBlog({ ...blogForm })\n        .unwrap()\n        .then((blog) => {\n          setBlogForm(initialEditorState);\n          onCreateSuccess();\n          showNotification({\n            message: `${blog.title} has been created`,\n            type: \"success\",\n          });\n        })\n        .catch((error) =>\n          showNotification({\n            message: `${error.message}`,\n            type: \"success\",\n          })\n        );\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <div>\n          <label htmlFor=\"title\">Title:</label>\n          <input\n            id=\"title\"\n            name=\"title\"\n            value={blogForm.title}\n            onChange={onChange(\"title\")}\n          ></input>\n        </div>\n        <div>\n          <label htmlFor=\"author\">Author:</label>\n          <input\n            id=\"author\"\n            name=\"author\"\n            value={blogForm.author}\n            onChange={onChange(\"author\")}\n          ></input>\n        </div>\n        <div>\n          <label htmlFor=\"url\">url:</label>\n          <input\n            id=\"url\"\n            name=\"url\"\n            value={blogForm.url}\n            onChange={onChange(\"url\")}\n          ></input>\n        </div>\n        <div>\n          <button>Create</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nBlogEditor.propTypes = {\n  onCreateSuccess: PropTypes.func,\n};\n\nexport default BlogEditor;\n","/Users/mk/stuff/fullstack-open-4/frontend/src/utils/doFetch.ts",["113"],"import { ApiError } from \"./errors\";\n\nconst doFetch = ({\n  url,\n  method,\n  token,\n  body,\n}: {\n  url: string;\n  method: \"POST\" | \"GET\" | \"PATCH\" | \"DELETE\";\n  token: string;\n  body?: unknown;\n}) =>\n  fetch(url, {\n    method,\n    body: body ? JSON.stringify(body) : null,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  })\n    .then((response) => {\n      if (response.ok) {\n        return response.text();\n      }\n\n      return response.text().then((text) => {\n        throw text;\n      });\n    })\n    .then((text) => {\n      return text ? JSON.parse(text) : {};\n    })\n    .catch((textError) => {\n      const data = textError.message ? JSON.parse(textError.message) : {};\n      throw new ApiError(data);\n    });\n\nexport default doFetch;\n",["114"],"/Users/mk/stuff/fullstack-open-4/frontend/src/utils/config.ts",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/utils/errors.ts",["115","116","117"],"export class ApiError extends Error {\n  data: any;\n\n  constructor(data: any) {\n    console.log(data);\n    const { error, message, ...restOfData } = data;\n\n    if (error) {\n      super(error);\n    } else if (message) {\n      super(message);\n    } else {\n      super(\"Unknown error\");\n    }\n\n    this.name = \"api-error\";\n    this.data = restOfData;\n  }\n}\n","/Users/mk/stuff/fullstack-open-4/frontend/src/state/auth.store.ts",["118"],"import { useLayoutEffect, useState } from \"react\";\nimport { useLoginMutation, userApi } from \"../services/login\";\nimport { createSlice, PayloadAction, SerializedError } from \"@reduxjs/toolkit\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Credentials, User } from \"../models/user\";\nimport { AppState } from \"./store\";\nimport { FetchBaseQueryError, QueryStatus } from \"@reduxjs/toolkit/dist/query\";\n\nexport const useAuthState = (): AuthState => {\n  const auth = useSelector((state: AppState) => state.auth);\n\n  return auth;\n};\n\nconst USER_KEY = \"blog-user-data\";\nfunction cacheUserInLocalStorage(user: User) {\n  const cachedUser = JSON.stringify(user);\n  localStorage.setItem(USER_KEY, cachedUser);\n}\n\nfunction retrieveCachedUser(): User | undefined {\n  const serializedUser = localStorage.getItem(USER_KEY);\n  return serializedUser && JSON.parse(serializedUser);\n}\n\nexport const useInitUser = () => {\n  const [done, setDone] = useState(false);\n  const dispatch = useDispatch();\n  useLayoutEffect(() => {\n    const cachedUser = retrieveCachedUser();\n    if (cachedUser) {\n      dispatch(\n        authSlice.actions.setUserAndToken({\n          user: cachedUser,\n          token: cachedUser.token,\n        })\n      );\n    }\n    setDone(true);\n  }, []);\n\n  return done;\n};\n\nexport const useLogin = (\n  callback?: () => void\n): [\n  (credentials: Credentials) => Promise<User>,\n  {\n    error?: FetchBaseQueryError | SerializedError;\n    status: QueryStatus;\n    isError: boolean;\n    isSuccess: boolean;\n    isLoading: boolean;\n    isUninitialized: boolean;\n    reset: () => void;\n  }\n] => {\n  const [login, loginState] = useLoginMutation();\n  const loginWrapper = (credentials: Credentials) => {\n    return login(credentials)\n      .unwrap()\n      .then((user) => {\n        if (user) {\n          cacheUserInLocalStorage(user);\n          callback && callback();\n        }\n\n        return user;\n      });\n  };\n\n  return [loginWrapper, loginState];\n};\n\nexport const useLogout = (callback?: () => void): (() => void) => {\n  const dispatch = useDispatch();\n\n  const logout = () => {\n    dispatch({ type: \"app/logout\" });\n    localStorage.removeItem(USER_KEY);\n    callback && callback();\n  };\n  return logout;\n};\n\nconst initialState: AuthState = {\n  user: null,\n  token: null,\n};\n\ntype AuthState = {\n  user: User | null;\n  token: string | null;\n};\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    logout: () => initialState,\n    setUserAndToken: (\n      state,\n      { payload: { user, token } }: PayloadAction<AuthState>\n    ) => {\n      state.token = token;\n      state.user = user;\n    },\n  },\n  extraReducers: (builder) =>\n    builder.addMatcher(\n      userApi.endpoints.login.matchFulfilled,\n      (state, action) => {\n        const user = action.payload;\n        state.token = user.token;\n        state.user = user;\n      }\n    ),\n});\n\nexport const selectUser = (state: AppState): User | null => state.auth.user;\nexport const selectToken = (state: AppState): string | null => state.auth.token;\n","/Users/mk/stuff/fullstack-open-4/frontend/src/state/notifications.store.ts",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/services/users.ts",["119"],"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport { User } from \"../models/user\";\nimport { AppState } from \"../state/store\";\nimport config from \"../utils/config\";\n\nexport const usersApi = createApi({\n  reducerPath: \"users\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${config.API_HOST}/api/`,\n    prepareHeaders: (headers, api) => {\n      const token = (api.getState() as AppState).auth.token;\n      headers.set(\"Authorization\", `Bearer ${token}`);\n\n      return headers;\n    },\n  }),\n  tagTypes: [\"USERS\"],\n  endpoints: (builder) => ({\n    users: builder.query<User[], void>({\n      query: () => ({ url: \"users\", method: \"GET\" }),\n      transformResponse: (users: any) =>\n        users.map((user: User) => ({\n          ...user,\n          blogsCount: user.blogs.length,\n        })),\n      providesTags: [\"USERS\"],\n    }),\n  }),\n});\n\n","/Users/mk/stuff/fullstack-open-4/frontend/src/pages/UsersPage.tsx",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/pages/UserPage.tsx",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/pages/BlogPage.tsx",[],"/Users/mk/stuff/fullstack-open-4/frontend/src/components/Navigation.tsx",[],{"ruleId":"120","severity":1,"message":"121","line":14,"column":19,"nodeType":"122","messageId":"123","endLine":14,"endColumn":24},{"ruleId":"124","severity":1,"message":"125","line":15,"column":6,"nodeType":"126","messageId":"127","endLine":15,"endColumn":9,"suggestions":"128"},{"ruleId":"120","severity":1,"message":"121","line":17,"column":22,"nodeType":"122","messageId":"123","endLine":17,"endColumn":27},{"ruleId":"124","severity":1,"message":"125","line":62,"column":37,"nodeType":"126","messageId":"127","endLine":62,"endColumn":40,"suggestions":"129"},{"ruleId":"124","severity":1,"message":"125","line":73,"column":33,"nodeType":"126","messageId":"127","endLine":73,"endColumn":36,"suggestions":"130"},{"ruleId":"124","severity":1,"message":"125","line":74,"column":28,"nodeType":"126","messageId":"127","endLine":74,"endColumn":31,"suggestions":"131"},{"ruleId":"124","severity":1,"message":"125","line":4,"column":42,"nodeType":"126","messageId":"127","endLine":4,"endColumn":45,"suggestions":"132"},{"ruleId":"120","severity":1,"message":"121","line":5,"column":14,"nodeType":"122","messageId":"123","endLine":5,"endColumn":52},{"ruleId":"120","severity":1,"message":"133","line":5,"column":15,"nodeType":"134","messageId":"135","endLine":5,"endColumn":48},{"ruleId":"124","severity":1,"message":"125","line":5,"column":45,"nodeType":"126","messageId":"127","endLine":5,"endColumn":48,"suggestions":"136"},{"ruleId":"120","severity":1,"message":"121","line":14,"column":20,"nodeType":"122","messageId":"123","endLine":14,"endColumn":49},{"ruleId":"120","severity":1,"message":"133","line":14,"column":21,"nodeType":"134","messageId":"135","endLine":14,"endColumn":45},{"ruleId":"124","severity":1,"message":"125","line":14,"column":42,"nodeType":"126","messageId":"127","endLine":14,"endColumn":45,"suggestions":"137"},{"ruleId":"124","severity":1,"message":"125","line":19,"column":27,"nodeType":"126","messageId":"127","endLine":19,"endColumn":30,"suggestions":"138"},{"ruleId":"124","severity":1,"message":"125","line":19,"column":43,"nodeType":"126","messageId":"127","endLine":19,"endColumn":46,"suggestions":"139"},{"ruleId":"124","severity":1,"message":"125","line":26,"column":28,"nodeType":"126","messageId":"127","endLine":26,"endColumn":31,"suggestions":"140"},{"ruleId":"120","severity":1,"message":"121","line":3,"column":17,"nodeType":"122","messageId":"123","endLine":13,"endColumn":6},{"ruleId":"141","replacedBy":"142"},{"ruleId":"124","severity":1,"message":"125","line":2,"column":9,"nodeType":"126","messageId":"127","endLine":2,"endColumn":12,"suggestions":"143"},{"ruleId":"120","severity":1,"message":"144","line":4,"column":15,"nodeType":"145","messageId":"146","endLine":4,"endColumn":24},{"ruleId":"124","severity":1,"message":"125","line":4,"column":21,"nodeType":"126","messageId":"127","endLine":4,"endColumn":24,"suggestions":"147"},{"ruleId":"120","severity":1,"message":"121","line":26,"column":28,"nodeType":"122","messageId":"123","endLine":26,"endColumn":33},{"ruleId":"124","severity":1,"message":"125","line":21,"column":34,"nodeType":"126","messageId":"127","endLine":21,"endColumn":37,"suggestions":"148"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["149","150"],["151","152"],["153","154"],["155","156"],["157","158"],"Object pattern argument should be typed with a non-any type.","ObjectPattern","anyTypedArgUnnamed",["159","160"],["161","162"],["163","164"],["165","166"],["167","168"],"jest/no-try-expect",["169"],["170","171"],"Argument 'data' should be typed with a non-any type.","Identifier","anyTypedArg",["172","173"],["174","175"],{"messageId":"176","fix":"177","desc":"178"},{"messageId":"179","fix":"180","desc":"181"},{"messageId":"176","fix":"182","desc":"178"},{"messageId":"179","fix":"183","desc":"181"},{"messageId":"176","fix":"184","desc":"178"},{"messageId":"179","fix":"185","desc":"181"},{"messageId":"176","fix":"186","desc":"178"},{"messageId":"179","fix":"187","desc":"181"},{"messageId":"176","fix":"188","desc":"178"},{"messageId":"179","fix":"189","desc":"181"},{"messageId":"176","fix":"190","desc":"178"},{"messageId":"179","fix":"191","desc":"181"},{"messageId":"176","fix":"192","desc":"178"},{"messageId":"179","fix":"193","desc":"181"},{"messageId":"176","fix":"194","desc":"178"},{"messageId":"179","fix":"195","desc":"181"},{"messageId":"176","fix":"196","desc":"178"},{"messageId":"179","fix":"197","desc":"181"},{"messageId":"176","fix":"198","desc":"178"},{"messageId":"179","fix":"199","desc":"181"},"no-conditional-expect",{"messageId":"176","fix":"200","desc":"178"},{"messageId":"179","fix":"201","desc":"181"},{"messageId":"176","fix":"202","desc":"178"},{"messageId":"179","fix":"203","desc":"181"},{"messageId":"176","fix":"204","desc":"178"},{"messageId":"179","fix":"205","desc":"181"},"suggestUnknown",{"range":"206","text":"207"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"206","text":"208"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"209","text":"207"},{"range":"209","text":"208"},{"range":"210","text":"207"},{"range":"210","text":"208"},{"range":"211","text":"207"},{"range":"211","text":"208"},{"range":"212","text":"207"},{"range":"212","text":"208"},{"range":"213","text":"207"},{"range":"213","text":"208"},{"range":"214","text":"207"},{"range":"214","text":"208"},{"range":"215","text":"207"},{"range":"215","text":"208"},{"range":"216","text":"207"},{"range":"216","text":"208"},{"range":"217","text":"207"},{"range":"217","text":"208"},{"range":"218","text":"207"},{"range":"218","text":"208"},{"range":"219","text":"207"},{"range":"219","text":"208"},{"range":"220","text":"207"},{"range":"220","text":"208"},[306,309],"unknown","never",[1813,1816],[2171,2174],[2206,2209],[157,160],[165,168],[338,341],[538,541],[554,557],[723,726],[46,49],[72,75],[702,705]]